/**
 * @auther Rakesh
 * @time Aug 13, 2016
 */

package com.rkumbhare.app.collections;

public class SinglyLinkedList<E> {
	private Node<E> head;
	private Node<E> tail;
	private int size;

	public SinglyLinkedList() {
	}

	static class Node<E> {
		E value;
		Node<E> next;
		public Node(E value, Node<E> next) {
			super();
			this.value = value;
			this.next = next;
		}
	}

	public void addFirst(E value) {
		Node<E> newNode = new Node<E>(value, null);
		size++;
		if (head == null) {
			head = tail = newNode;
		} else {
			newNode.next = head;
			head = newNode;
		}
	}

	public void addLast(E value) {
		Node<E> newNode = new Node<E>(value, null);
		size++;
		if (head == null) {
			head = tail = newNode;
		} else {
			tail.next = newNode;
			tail = newNode;
		}
	}

	public void add(E value) {
		Node<E> newNode = new Node<E>(value, null);
		size++;
		if (head == null) {
			head = tail = newNode;
		} else {
			tail.next = newNode;
			tail = newNode;
		}
	}
	
	public void add(int index, E value){
		if(index > size-1){
			throw new IllegalArgumentException("the index '" + index + "' is greater than size '" + size + "'");
		}
		
		Node<E> newNode = new Node<E>(value, null);
		size++;
		Node<E> current = head;
		for(int i=1; i<index; i++){
			current = current.next;
		}
		newNode.next = current.next;
		current.next = newNode;
	}
	
	public E getFirst(){
		if(head == null){
			throw new IllegalStateException("Linkedlist is Empty");
		}else{
			return head.value;
		}
	}
	
	public E getLast(){
		if(head == null){
			throw new IllegalStateException("Linkedlist is empty");
		}else{
			return tail.value;
		}
	}
	
	public E get(int index){
		if(index==0){
			return head.value;
		}else if(index <= size-1){
			Node<E> current = head;
			for(int i=1; i<index; i++){
				current = current.next;
			}
			return current.next.value;
		}else{
			throw new IllegalArgumentException("Index '" + index + "' not a valid");
		}
	}

	
	public boolean remove(E value){
		Node<E> current = head;
		Node previous = null;
		
		while(current != null){
			if(current.value==value || current.value.equals(value)){
				if(previous==null){
					head = current.next;
					size--;
					return true;
				}else if(current==tail){
					previous.next = null;
					tail = previous;
					size--;
					return true;
				}else{
					previous.next = current.next;
					size--;
					return true;
				}
			}
			
			previous = current;
			current = current.next;
		}
		
		return false;
	}
	
	
	public E remove(int index){
		if(index==0){
			E value = head.value;
			head = head.next;
			size--;
			return value;
		}
		
		if(index == size-1){
			Node<E> current = head;
			for(int i=1; i<size-1; i++){
				current = current.next;
			}
			Node<E> deleteNode = current.next;
			tail = current;
			current.next = null;
			size--;
			return deleteNode.value;
		}
		
		if(index > size-1){
			throw new IllegalArgumentException("the index '" + index + "' is greater thean size '" + size + "'");
		}
		
		Node<E> current = head;
		for(int i=1; i<index; i++){
			current = current.next;
		}
		
		Node<E> deleteNode = current.next;
		current.next = deleteNode.next;
		size--;
		return deleteNode.value;
	}
	
	
	public static void main(String[] args) {
		SinglyLinkedList<String> list = new SinglyLinkedList<String>();
		list.addFirst("Rasesh");
		list.addFirst("Ravi");
		list.addFirst("Rajesh");
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");
		list.add("X");
		list.add("Y");
		list.add("Z");
		
		list.add(2, "R");
		list.add(3, "K");
		
		for(int i=0; i< list.size; i++){
			System.out.println(list.get(i));
		}
		
		System.out.println(list.getFirst());
		System.out.println(list.getLast());
		
		System.out.println(list.remove("R"));
		System.out.println(list.remove(2));
		System.out.println(list.remove(8));
		
		System.out.println(list.remove("Y"));
		
		System.out.println(list.size);
		
	}
}
